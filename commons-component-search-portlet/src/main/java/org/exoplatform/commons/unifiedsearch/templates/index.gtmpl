    <style>
      .Selected {
        font-weight: bold;
      }

      .Clickable {
        cursor: pointer;
      }

      .SearchResultType {
        margin-bottom: 40px;
        display: none;
      }


      .SearchResult {
        margin-left: 5px;
        padding-top: 5px;
        height: 60px;
      }

      .SearchResult .Avatar {
        float: left;
        padding-top: 3px;
      }

      .SearchResult .Avatar img {
        width: 48px;
        height: 48px;
      }

      .SearchResult .Content {
        padding-left: 10px;
        overflow: hidden;
      }

      .SearchResult .Content .Title {
        font-weight: bold;
      }

      .SearchResult .Content .Excerpt {
        font-size: x-small; height: 19px;
      }

      .SearchResult .Content .Detail {
        font-size: small; color: grey;
      }


      #facetsFilter {
        float: left;
        border-style: solid;
        border-width: 1px;
        margin-right: 10px;
        padding-bottom: 10px;
        height: auto;
        width: auto;
      }

      #facetsFilterTitle {
        text-align: center;
        background: none repeat scroll 0% 0% lightGrey;
        border-bottom: 1px solid;
        margin-bottom: 10px;
        padding-top: 2px;
        padding-bottom: 2px;
      }

      #facetsFilter ul {
        list-style: none outside none;
        padding-left: 20px;
        margin-top: 2px;
        margin-bottom: 16px;
      }


      #resultPage {
        overflow: auto;
      }


      #sortType {
        padding-right: 15px;
      }

      #sortType.Asc {
        background: url("/eXoResources/skin/DefaultSkin/skinIcons/16x16/icons/NavigationIcons/BlueUpArrow.gif") no-repeat;
      }

      #sortType.Desc {
        background: url("/eXoResources/skin/DefaultSkin/skinIcons/16x16/icons/NavigationIcons/BlueDownArrow.gif") no-repeat;
      }

      .Ellipsis {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        -o-text-overflow: ellipsis;
        -ms-text-overflow: ellipsis;
      }

    </style>

    <div id="searchPortlet">
      <div id="sqlExec" style="margin-bottom: 20px; border: 1px dashed gray; padding-top: 5px; padding-left: 5px; display: none;">
        <div style="font-size: small;">SQL:</div>
        <div style="margin: 10px;">
          <textarea rows="4" cols="50" id="txtSql">SELECT rep:excerpt(), jcr:primaryType FROM nt:base WHERE CONTAINS(*, '%query%') ORDER BY jcr:score() DESC</textarea>
        </div>
      </div>

      <div id="searchForm" style="padding-top: 5px; text-align: center;">
        <input type="text" id="txtQuery"/>
        <input type="button" id="btnSearch" value="Search"/>
        <hr/>
      </div>

      <div id="facetsFilter">
        <div id="facetsFilterTitle">Filter By</div>
        <div style="padding-right: 10px;">
          <div id="siteFilter">
            <input type="checkbox" name="site" value="all">All Sites
            <ul id="lstSites"></ul>
          </div>

          <input type="checkbox" name="contentType" value="all">All Content Types
          <ul id="lstContentTypes"></ul>
        </div>
      </div>

      <div id="resultPage">
        <div id="resultTypes" style="display: none; margin-bottom: 15px;"></div>
        <div style="margin-bottom: 10px;">
          <span id="resultHeader"></span>
          <span id="resultSort" style="float: right; display: none;">
            Sort By: <select id="lstSortBy"></select><span id="sortType" class="Desc Clickable">&nbsp;</span>
          </span>
        </div>
        <div id="result" style="display: none;"></div>
        <div id="showMore" style="display: none; text-align: center; margin-bottom: 20px;"><input type="button" id="btnShowMore" value="Show More Results"/></div>
      </div>

    </div>

    <script>
      var USER_SETTING;
      var LIMIT;
      var REGISTRY;
      var VIEWING_TYPE;

      init();


      function init() {
        // get user setting
        $.getJSON("/rest/search/setting", function(setting){
          USER_SETTING = setting;
          LIMIT = USER_SETTING.resultsPerPage;

          loadContentFilter();
          loadSiteFilter();

          if(USER_SETTING.hideFacetsFilter) {
            $("#facetsFilter").hide();
          }

          if(USER_SETTING.hideSearchForm) {
            $("#searchForm").hide();
          } else {
            $("#txtQuery").focus();
          }
        });
      }


      function loadContentFilter() {
        $.getJSON("/rest/search/registry", function(registry){
          REGISTRY = registry;
          var contentTypes = [];
          $.each(REGISTRY, function(searchType, connector){
            if(-1 != $.inArray("all", USER_SETTING.searchTypes) || -1 != $.inArray(searchType, USER_SETTING.searchTypes)) {
              contentTypes.push("<li><label><input type='checkbox' name='contentType' value='" + connector.searchType + "'>" + connector.displayName + "</label></li>");
            }
          });
          if(0!=contentTypes.length) {
            $("#lstContentTypes").html(contentTypes.join(""));
            $(":checkbox[name='contentType']").attr('checked', true);
          } else {
            $(":checkbox[name='contentType'][value='all']").attr("checked", false).attr("disabled", "disabled");
          }
        });
      }


      function loadSiteFilter() {
        if(USER_SETTING.searchCurrentSiteOnly) {
          $("#siteFilter").hide();
        } else {
          $.getJSON("/rest/search/sites", function(sites){
            var siteNames = [];
            $.each(sites, function(i, site){
              siteNames.push("<li><label><input type='checkbox' name='site' value='" + site + "'>" + site.toProperCase() + "</label></li>");
            });
            $("#lstSites").html(siteNames.join(""));
            $(":checkbox[name='site']").attr('checked', true);
          });
        }
      }



      String.prototype.toProperCase = function () {
          return this.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
      };


      function renderSearchResult(result) {
        var template = " \
          <div class='SearchResult %{type}'> \
            <div class='Avatar Clickable'> \
              <img title='%{title}' src='%{avatar}' alt='[+]'> \
            </div> \
            <div class='Content'> \
              <div class='Title Ellipsis'><a href='%{url}'>%{title}</a></div> \
              <div class='Excerpt Ellipsis'>%{excerpt}</div> \
              <div class='Detail'>%{detail}</div> \
            </div> \
          </div> \
        ";

        var html = template.replace(/%{type}/g, result.type).replace(/%{url}/g, result.url);
        html = html.replace(/%{title}/g, result.title).replace(/%{excerpt}/g, result.excerpt).replace(/%{detail}/g, result.detail).replace(/%{avatar}/g, result.imageUrl);
        return html;
      }


      function clearResultPage(message){
        $("#resultTypes").html("");
        $("#result").html("");
        $("#resultHeader").html(message?message:"");
        $("#resultSort").hide();
        $("#showMore").hide();
        $("body").css("cursor", "auto");
        return;
      }


      function getSelectedTypes(){
        //if($(":checkbox[name='contentType'][value='all']").is(":checked")) return "all";
        var selectedTypes = [];
        $.each($(":checkbox[name='contentType'][value!='all']:checked"), function(){
          selectedTypes.push(this.value);
        });
        return selectedTypes.join(",");
      }


      function getSelectedSites(){
        //if($(":checkbox[name='site'][value='all']").is(":checked")) return "all";
        if(USER_SETTING.searchCurrentSiteOnly) return parent.eXo.env.portal.portalName;
        var selectedSites = [];
        $.each($(":checkbox[name='site'][value!='all']:checked"), function(){
          selectedSites.push(this.value);
        });
        return selectedSites.join(",");
      }


      function showMore(offsetIncrement) {
        if(isSqlMode()) return;
        var query = $("#txtQuery").val();
        if(""==query) {
          clearResultPage();
          return;
        }

        var $viewingType = $(".ResultType.Selected");
        var type = $viewingType.attr("type");
        var offset = parseInt($viewingType.attr("offset"))+offsetIncrement;
        var sortBy = $("#lstSortBy").val();
        var sortType = $("#sortType").hasClass("Asc") ? "asc" : "desc";

        var restUrl = "/rest/search?q="+query+"&sites="+getSelectedSites()+"&types="+type+"&offset="+offset+"&limit="+LIMIT+"&sort="+sortBy+"&order="+sortType;

        $("body").css("cursor", "wait");

        $.getJSON(restUrl, function(entryMap){
          var result = "";
          var entries = entryMap[type];

          $.each(entries, function(i, entry){
            result = result + renderSearchResult(entry);
          });

          var resultHeader = (0==entries.length) ? "No more result" : "Results " + (offset+1) + " to " + (offset+entries.length);
          resultHeader = resultHeader + " for <strong>" + (isSqlMode()?$("#txtSql").val().replace(/%query%/g, $("#txtQuery").val()):$("#txtQuery").val()) + "<strong>";
          $("#resultHeader").html(resultHeader);
          if(entries.length==LIMIT) $("#showMore").show(); else $("#showMore").hide();

          $("#"+type+"-type").html(result);
          $("#"+type+"-type").show();
          $("body").css("cursor", "auto");

          $viewingType.attr("offset", offset);
          $viewingType.attr("numEntries", entries.length);
        });
      }


      function isSqlMode() {
        return $("#sqlExec").is(":visible");
      }


      function search(callback) {
        var query = $("#txtQuery").val();
        var sql = $("#txtSql").val().replace(/%query%/g, query);
        if(!isSqlMode() && ""==query) {
          clearResultPage();
          return;
        }

        var restUrl = "/rest/search?q=" + (isSqlMode()?sql:query+"&sites="+getSelectedSites()+"&types="+getSelectedTypes()+"&offset=0"+"&limit="+LIMIT+"&sort="+"&order=desc");

        $("body").css("cursor", "wait");

        $.getJSON(restUrl, function(entryMap){
          var resultTypes = "| ";
          var result = "";

          $.each(entryMap, function(type, entries){
            if(0!=$(entries).size()) {
              var typeDisplayName = isSqlMode() ? type + " (" + $(entries).size() + ")" : REGISTRY[type].displayName;
              resultTypes = resultTypes + "<span class='Clickable ResultType' type='" + type + "' offset=0 numEntries=" + $(entries).size() + ">" + typeDisplayName + "</span>" + " | ";
              result = result + "<div class='SearchResultType' id='" + type + "-type'>";

              $.each(entries, function(i, entry){
                result = result + renderSearchResult(entry);
              });
              result = result + "</div>"; //type div
            }
          });

          if(""==result) {
            clearResultPage("No result for <strong>" + (isSqlMode()?sql:$("#txtQuery").val()) + "<strong>");
            return;
          }

          $("#resultTypes").html(resultTypes+"<hr/>");
          $("#resultTypes").show();

          $("#result").html(result);
          $("#result").show();
          $("#resultSort").show();
          $("body").css("cursor", "auto");

          if(callback) callback();
          (VIEWING_TYPE && $(".ResultType[type='" + VIEWING_TYPE + "']").get(0) ? $(".ResultType[type='" + VIEWING_TYPE + "']").get(0) : $(".ResultType").first()).click();
        });
      }


      $(".ResultType").live("click", function(){
        $(".Selected").toggleClass("Selected");
        $(this).toggleClass("Selected");

        var offset = parseInt($(this).attr("offset"));
        var numEntries = parseInt($(this).attr("numEntries"));

        var resultHeader = (0==numEntries) ? "No more result" : "Results " + (offset+1) + " to " + (offset+numEntries);
        resultHeader = resultHeader + " for <strong>" + (isSqlMode()?$("#txtSql").val().replace(/%query%/g, $("#txtQuery").val()):$("#txtQuery").val()) + "<strong>";
        $("#resultHeader").html(resultHeader);
        if(numEntries==LIMIT) $("#showMore").show(); else $("#showMore").hide();

        var type=$(this).attr("type");
        //type = type.replace(/(:|\\.)/g,'\\\\$1').replace(/\\s/g, "_"); //for jcr nodetype
        type = type.replace(/(:|\\.)/g,'\\\\$1'); //for jcr nodetype
        var sortFields = REGISTRY[type] ? REGISTRY[type].sortFields : undefined;
        var sortBy = [];
        if(sortFields != undefined) {
          $.each(sortFields, function(i, field){
            sortBy.push("<option value='" + field + "'>" + field + "</option>")
          });
        }
        $("#lstSortBy").html(sortBy.join(""));
        $(".SearchResultType").hide(); //hide all other types
        $("#"+type+"-type").show();
      });


      $(".SearchResult .Avatar img").live("click", function(){
        var url = $(this).parents("div.SearchResult").find(".Content > .Title > a").attr("href");

        //get jcr node properties
        if(0 == url.indexOf("/rest/jcr/")) {
          $.getJSON("/rest/search/jcr/props?node=" + url.replace("/rest/jcr/", ""), function(props){
            var sProps = "";
            $.each(props, function(key, value){
              sProps = sProps + key + " = " + value + "\\n";
            });
            console.log(props);
            alert(sProps);
          });
        }
      });


      $(":checkbox[name='contentType']").live("click", function(){
        if("all"==this.value){ //All Content Types checked
          if($(this).is(":checked")) { // check/uncheck all
            $(":checkbox[name='contentType']").attr('checked', true);
          } else {
            $(":checkbox[name='contentType']").attr('checked', false);
          }
        } else {
          $(":checkbox[name='contentType'][value='all']").attr('checked', false); //uncheck All Content Types
        }

        if(!isSqlMode()) {
          VIEWING_TYPE = $(".ResultType.Selected").attr("type"); //save the current view before performing search
          var checkedType = $(this).is(":checked") ? this.value : undefined;
          search(function(){
            if(checkedType && $(".ResultType[type='" + checkedType + "']").get(0)) VIEWING_TYPE = checkedType;
          });
        }
      });


      $(":checkbox[name='site']").live("click", function(){
        if("all"==this.value){ //All Sites checked
          if($(this).is(":checked")) { // check/uncheck all
            $(":checkbox[name='site']").attr('checked', true);
          } else {
            $(":checkbox[name='site']").attr('checked', false);
          }
        } else {
          $(":checkbox[name='site'][value='all']").attr('checked', false); //uncheck All Sites
        }

        if(!isSqlMode()) {
          VIEWING_TYPE = $(".ResultType.Selected").attr("type"); //save the current view before performing search
          search();
        }
      });


      $("#btnSearch").click(function(){
        search();
      });


      $("#txtQuery").focus(function(){
        VIEWING_TYPE = $(".ResultType.Selected").attr("type"); //save the current view before performing search
      });


      $("#txtQuery").keyup(function(e){
        var keyCode = e.keyCode || e.which,
            arrow = {up: 38, down: 40 };

        switch (keyCode) {
          case arrow.up:
            $("#sqlExec").hide();
            break;
          case arrow.down:
            $("#sqlExec").show();
            break;
          default:
            search();
        }
      });


      $("#btnShowMore").click(function(){
        showMore(LIMIT);
      });


      $("#lstSortBy").change(function(){
        showMore(0);
      });


      $("#sortType").live("click", function(){
        $(this).toggleClass("Asc Desc");
        showMore(0);
      });


    </script>